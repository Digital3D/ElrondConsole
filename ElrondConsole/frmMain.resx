<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAAAAABoBQAANgAAACAgAAAAAAAAqAgAAJ4FAAAwMAAAAAAAAKgOAABGDgAAKAAAABAA
        AAAgAAAAAQAIAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAACafXoAqHxuANyKVwDai1oA0Y5lAM2b
        fwDooXAA97h+AE95ngB8jp8AepuuAGmZtgAiiM4AHJnmAGbE7AB73PkAj4SEAJuLiwCZlJQAuJSCAKaR
        kACpl5cAoJ2dAKCengCvnpwAl5upAKaiogCnpqYArqioAKyqqgCura0AsqWlALinpwC0ra0Au6ipALqt
        rQC7ra0AvK6uALe0tAC3trYAu7a2ALy7uwDrsocA7bOGAOuziADvuIsA97iAAOW7lQDsvJMA572aAOi5
        mQDrvpgAxbSsAN25pgDHtrAAzLexAOi+pADtwJkA8MCVAP3PmQD90p0A38WxANjEvgDsxaAA/dOgAPnT
        pAD926oA/d6vAOfNuADt0rIA7dOyAO3WtgDm174A7de5AP3iswD947UA/eS2AP3rvwCD1/kAid39AMXF
        xQDGxsYAzc3NANLGwwDSzMwA1c7OANDQ0ADR0dEA0dLTANLS0gDT09MA09XXANrT0wDj0MYA7NjBAOrc
        wADs28wA7ebNAO3mzgD968IA/ezDAPvsygD978oA/e/LAO3r1gDt7NwA8+TTAP3y0wD99NsA/fXdAO3t
        6QCKe3sAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAAABAAAAegB8AADs/X8aAgAAfAyMADjPCgAsDIwAJALod+QQ
        jABFAAAAKAIAAP////96SPV35kj1dw/mAQAAAAUAJA6MAIAAEMDkEIwAAiT4d/hU93f/////jRb1dwAA
        AACXFfV3u3vnd7cAAAACAAAA1BCMAAEAAAAYAAAAAAAAAEAPjABCAAAAAAAAACQPjAAAAAAAAAAAAAAA
        AAAMAAAAAgAAAAEB9XcA7P1/egAAAAAAAAADAAAAggAaAjjPCgAAAAAAOM8KAAUAAAAoqOd3fA+MAGSo
        53f8AAAAAAAAwAAAAAAAAAAAAgAAAIAAAAAAAAAAvBCMAK/GSgD4UDcAAAAAwAAAAACwEIwAAgAAAIAA
        AAAAAAAAdFWMAOz1pgACAAAAQzpcUHJvZ3JhbSBGaWxlc1xCZWUgSWNvbnNcVGhlbWVzXENyeXN0YWwg
        SWNvbnMgKFhQKVxGaW4JAAAASAAAAD8803cQEIwAQjvTd9/093f7ned3/AAAAAAAAAAAAAAAAAAAADAQ
        jAAYAPgANgAAAAAAAAAbnud3NgAAANQQjAADAAAAAAAAADYAAAA2AAAAAwAAACQQjABCO9N35BCMAIa7
        6XcQVel3/////xue53dGx0oA/AAAABgA+AA2AAAAiBCMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAA0aAAAAAAAAAAAAAAAAAA5QDwAAAAAAAAAAAAAAAA5QEAAAAAAAAAAAAAAAAA5QEAAAAAAA
        AAAAAAAAAAlPEAAAAAAAABEBNVQ3FhIjDAAAAAAAAHAUYGpvakk4JQAAAAAAAAACNEhiaWNIMiQAAAAA
        AAAgBStARkpHQC02AAAAAAAAIQMHLDs6MS4vMwAAAAAAACYECEFETUxDPDkAAAAAAAAABj1LZWhnTkI/
        AAAAAAAAABUwZGxubWZFGwAAAAAAAAAAGT5fa2FeHQAAAAAAAAAAAAAAVl1VAAAAAAAAAAAA//8AAP/5
        AAD/8QAA/+MAAP/HAAD/jwAAwB8AAIA/AACAPwAAAD8AAAA/AAAAPwAAgD8AAIA/AADAfwAA8f8AACgA
        AAAgAAAAQAAAAAEACAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAvXlYAIZqagCFbW0AiG1tAI5t
        bQCacWcAgnBwAIZxcQCHdXUAinV1AJN0dACVdnYAlXl5AJl8fACgcWQAqX9vAKB9cwDOflEArYZ9ANKA
        UADljlcA5ZBZANOTawDYmnIA5pdkAOaYZQDtnGMA559uAO6hagDvpW8A8qNnAOSidwDooHAA6KZ3AOao
        fgDsrHsA6al8AO+vfgD1r3YA+K91APiyeAAJaLYACGy7AAhsvAAuaqAASm6RAEuAsABSkLoAEY/hABCd
        8wAhpuoAIqrsAEiMwABcm8sAS53UAEKx7gBKvvoAcsbvAGvS9gCPg4MAk4KCAJGFhgCdgYEAnYWFAJeP
        jwCakJAAnpCQAJmTlACclZUAnpSUAJ6XlwCghIQApIqKAKaNjQCoj48AuZWLALKYjACjlZUAoZeXAKmQ
        kACulpYArJeZAKOamgClm5sAop2dALaXkAC0np4AjJimAKycoACCobYApqKiAKqjowCopaUAraSkAK2r
        qwC2oaEAuKKiALmlpQC9qKYAsaioALOqqgC2q6sAvKioAL6srAC3tbUAuLa2ANaojQDcrpUA0a6bAN61
        lgDVs58A6bCFAO21hQDqsogA67aNAO23jADyt4cA+byDAPy9hADyuYoA8buOAPO/jwDquJEA7LqSAOy7
        lADsvJUA7L6YAPC/kwDDqKEAybGjAM2wpwDIt60A1LWgANu8qwDevKgAwrGxAMSysgDCtrYAxrS0AMS3
        twDbv7MA/cSLAPnDjgD9xo4A7MKdAOzEngDzwpQA/cqTAP3MlQDwxZgA/c+aAPzQmwD70JwA/dOfANvC
        tgDTwr8A1sq6AOzFoADryKYA7MikAOPLrwDty6gA7c2rAO3OrAD906AA/dWiAP3XpAD92KYA+tqrAPza
        qQD93KsA/d2tAOXHsADgw7QA6c++AOzRsQDt1bUA7Ne5AOrRvgDt2boA7dq8AO3cvgDw0LMA/eGyAP3l
        twD54boA/ee6AP3pvAC+xcwAvMzXAIzf/gCE6f8AqOf2AMbExgDJwcEAz8DAAMvFxQDLxMkAyMjIAMrK
        ygDMy8sAzs7OANLDwwDVx8cA1cnJANHOzgDTz88A2M3NANrPzwDf2M4A0NDQANLS0gDW0dEA19LSANDT
        1gDc0dEA3dLSAN/V1QDf1tYA7d7BAO3fxADg1tYA49jXAOLZ2QDk29sA5d3dAOzjywDt5MkA7ebNAO3o
        zwD75sEA/evBAP3txAD978kA/fDNAOfj1wDt6dEA7evWAO3s2QDt7N0A/fDRAP3y1QD989gA/PTcAML5
        /wDp4uIA6ufjAO3t4wDt7eUA7uzoAO3t7AD99uAA/fjnAP346wC9elYAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAKi1ZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACsyODXGAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAArMjm/wTcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALDI5v/XAMwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAACwyOb/1wDQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsMjm/9cA0AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAALDI5v/XANAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwyOb/1wDQAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAuMTm/9cA0AAAAAAAAAAAAAAAAAAAAPAkHCT4AAAAAAD4vOvXANAAA
        AAAAAAAAAAAAAAAAAg5ISUtRV2FKAAAAUFI2OzQAAAAAAAAAAAAAAAAACAsNTZ3s+vfShGOLUGLNiQAw
        AAAAAAAAAAAAAAAAAAQMEaHl7/j7+/jv44LEYMteAAAAAAAAAAAAAAAAAAAKDBCfsuTu8Pn58O7ktIXM
        aIoAAAAAAAAAAAAAAAAAAAUGe6Cx3Obu8PDu5t2xoG3QRwAAAAAAAAAAAAAAAAADCxhzkaOy3eXt7eXd
        sqORc5yIAAAAAAAAAAAAAAAAAAUPInB9nqOxtdzctrGknn1wa9kAAAAAAAAAAAAAAAAADv8cJXJ9kqKk
        sLCkop5+ciUg3lMAAAAAAAAAAAAAAAA/EhkhJXJ7f5GenpF/e3ImKR3eTwAAAAAAAAAAAAAAAEgUFhoh
        JHV6k4B8c3R4j5B3H9tTAAAAAAAAAAAAAAAAShIVG3aVmqirrLisrKqml5Ae4FQAAAAAAAAAAAAAAABQ
        ASiOlaWquLm7vLy7uKunlyPiXAAAAAAAAAAAAAAAAD8TJ5Saqri86Onp6em8uayZbOAAAAAAAAAAAAAA
        AAAAPWEXmKi4vOnq6/Hx6+rouXnfjAAAAAAAAAAAAAAAAAAAUFZxrLvp6/Hz8/Py8eqphuAAAAAAAAAA
        AAAAAAAAAAAAaEyW6Orx9Pz8/PTyuof2ZAAAAAAAAAAAAAAAAAAAAABDi4Fu5/L8/f7+9Leb9owAAAAA
        AAAAAAAAAAAAAAAAAAAAZ8yDb62zr66N4dplAAAAAAAAAAAAAAAAAAAAAAAAAAAATonR2Nne39BmAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP//////////////w///
        /4P///8D///+A////Af///gP///wH///4D///8B//wfA//wBwf/wAAv/4AAP/8AAD//AAA//gAAP/4AA
        D/+AAAf/gAAH/4AAB/+AAAf/gAAH/4AAD/+AAA//wAAf/+AAH//gAD//+AB///wB////////KAAAADAA
        AABgAAAAAQAIAAAAAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAACOY1sAp21VAKJwXgC8dFEAsnRZAIRk
        ZACIZmYAjGhlAIVrawCMbWwAnHBkAJ12agCNcXEAjXt7AJFzcwCbe3QAlHt7AJp8fAC4fWMAwHdTAMR5
        UQCtgHIAv4hwANyPXgDkjVYA5Y9ZAOWSXADsmF8A045kAMGPeADQlnIA2Z9/AOKWYwDkmWYA5ppoAOyj
        bgDxoWcA8qVqAPSqbgDnoHAA6KJxAOOheQDopngA6qt8APOqcQD4sXUA8bJ+APi0ewD8u38AEVeZABdb
        mgAvXpAAC2CpAAhsvAAcd7wAP3uxAFNtkABNc5oAkn+FAD6HvgBrjbEAAYLeAB2X3wAiis8AMonHAAGD
        4AANmO0AF5LhABuU4QAMnPEAJKbpADSy9gA1svgARo3FAFCZygBHn9YAU6rcAHahxgByps8AbrzlADPD
        9wAzw/gAWsP2AF/I+wBhyPoAfOL7AJaEhACcgYEAl4yMAJyKigCdlpYAoYWEAKOIhwCjiIgAqI+NALeO
        gQCqkY4Aq5OSAKSYmACrnJwAsJaSALOalQCwmpkAtZ6ZALOcnAC0np4At6KeALuhnACTn6wAoZ+hAKmf
        pQCVoa0Ahqa6AIinvACKqLwAk6W5AKahoQCtoKAAqqWlAK2npwCrqKgAraqqALSjowC6pKQAs62tALmq
        qgC9qqoAuK6uALyvrwCusLIAsrGxALWxsQC2tbUAu7S0ALy7uwDKn4kA2Z+AAMGdkQDVpIwA3aiIAMSo
        nwDOrJ8A0KyUANSvngDcsJQA0LKdANyzmwDnq4IA6a2AAOqyhQDms4sA6rSKAOu4jQDztYIA+b2FAPK9
        jgD6v4gA67uSAOu+mADArqkAwK2tAM6xpwDOvKkA1rKiAN+4owDTt64AwbGxAMSysgDDtrYAxbW1AMm3
        tgDBubsAyrq6ANO5sQDTvrkA4r6pAPvAhwD2wY8A/MWMAOvDngD0xZYA+MaRAPvJkgD0yJkA+s6aAPvS
        ngDWwq8A08W3AOTAoQDsxqIA7MqnAOvMqwD2zaQA7NCvAPzVogD82KYA+92tAOfNtADs1LUA7Nu9APzj
        tAD65LsA/Om7AKu1wACkvs8AmsDZAIze/QCE6P0Ar+z6ALby/QC59P0Aw8PDAMrAwADJyMgAzMzMANLD
        wwDUysoA2M3MANLS0gDU09MA1tXVANvQ0ADc0NAA2NfXAN7V1QDZ2NgA7N7DAODW1gDi2dkA6N/fAOzg
        xADn4c0A7OXMAPnhwgD87cMA+OPPAPvoywD88cwA6OPVAOzq1gDs6t0A+/HSAPz02QD8+doAxvv9AMn8
        /QDp4+MA7OviAOzr6QDw6+sA+/PlAPz44wD8+usAfVtbAL16VgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdHtkAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAyNTlkXhEAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADNCQzc9rXwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAMz5GSFNBTt7VAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAFytrWCeyu7y8/z8/f39/PzttKb35a0AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAABeqN5siLTq8vz9/f377MCk2vrapwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYmnf
        5KiKj5OwsKWkotr65q2nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABne9n35uXh5eb5+eGt
        ewAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHZnfKGrrauofoAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD///////8AAP///////wAA//////8fAAD//////gcAAP/////8BwAA//////gDAAD/////8AcAAP//
        ///gBwAA/////8AHAAD/////gA8AAP////8AHwAA/////gA/AAD////8AH8AAP////gA/wAA////8AH/
        AAD////gA/8AAP////AH/wAA//AP8A//AAD/gAGgH/8AAP4AAAA//wAA/AAAA3//AAD4AAAH//8AAPAA
        AAP//wAA4AAAA///AADgAAAH//8AAMAAAAP//wAAwAAAA///AACAAAAD//8AAIAAAAH//wAAgAAAAf//
        AACAAAAB//8AAIAAAAH//wAAgAAAAf//AACAAAAB//8AAIAAAAH//wAAgAAAAf//AACAAAAD//8AAMAA
        AAP//wAAwAAAA///AADgAAAH//8AAOAAAAf//wAA8AAAD///AAD4AAAf//8AAPwAAD///wAA/gAAf///
        AAD/gAH///8AAP/gB////wAA////////AAA=
</value>
  </data>
</root>